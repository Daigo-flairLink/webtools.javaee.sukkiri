/*******************************************************************************
 * Copyright (c) 2003, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.jst.j2ee.internal.ejb.codegen;


import java.util.ArrayList;
import java.util.List;

import org.eclipse.jem.java.JavaHelpers;
import org.eclipse.jem.java.JavaParameter;
import org.eclipse.jem.java.Method;
import org.eclipse.jst.j2ee.internal.codegen.GenerationException;
import org.eclipse.jst.j2ee.internal.codegen.IBaseGenerator;
import org.eclipse.jst.j2ee.internal.ejb.codegen.helpers.EJBClassReferenceHelper;
import org.eclipse.jst.j2ee.internal.ejb.codegen.helpers.EnterpriseBeanHelper;
import org.eclipse.jst.j2ee.internal.ejb.codegen.helpers.EntityHelper;
import org.eclipse.jst.j2ee.internal.java.codegen.JavaMemberGroupGenerator;
import org.eclipse.jst.j2ee.internal.java.codegen.JavaParameterDescriptor;


/**
 * Creates the group generator for the client view generators.
 */
public class EJBMethodGroupGenerator extends JavaMemberGroupGenerator {

	private EJBClassReferenceHelper ejbRefHelper;
	private EntityHelper entityTopHelper;
	private Method currentMethod;

	/**
	 * Default constructor
	 */
	public EJBMethodGroupGenerator() {
		super();
	}// EJBMethodGroupGenerator

	/**
	 * Initializes the client view generators.
	 * 
	 * @param Object
	 *            helper - The helper that contains the data to work off of.
	 * @throws GenerationException
	 */
	public void initialize(Object helper) throws GenerationException {
		super.initialize(helper);

		ejbRefHelper = (EJBClassReferenceHelper) helper;

		if (ejbRefHelper.hasLocalInterface() && ejbRefHelper.getMethodCollection() != null) {
			this.generateMethods(IEJBGenConstants.EJB_LOCAL_CLIENT_METHOD_GENERATOR, ejbRefHelper.getMethodCollection());
		} else if (ejbRefHelper.hasRemoteInterface() && ejbRefHelper.getMethodCollection() != null) {
			this.generateMethods(IEJBGenConstants.EJB_REMOTE_CLIENT_METHOD_GENERATOR, ejbRefHelper.getMethodCollection());
		} else if (ejbRefHelper.isServiceEndpointHelper() && ejbRefHelper.getMethodCollection() != null) {
			this.generateMethods(IEJBGenConstants.EJB_SERVICE_END_POINT_CLIENT_METHOD_GENERATOR, ejbRefHelper.getMethodCollection());
		}// if

	}// initialize

	/**
	 * Fires off the correct generator and generates the passed in method.
	 * 
	 * @param String
	 *            generatorName - Name of the generator to fire.
	 */
	public void generateMethods(String generatorName, List currentMethodList) throws GenerationException {
		for (int i = 0; i < currentMethodList.size(); i++) {
			if (currentMethodList.get(i) != null) {
				currentMethod = (Method) currentMethodList.get(i);
				if (!isBaseHomeMethod(currentMethod)) {
					this.createMemberGenerator(generatorName, currentMethod);
				}// if
			}// if
		}// for
	}// generateMethods

	/**
	 * Create the branching generator.
	 * 
	 * @param String
	 *            generatorName - The name of the generator to fire off.
	 * @param Object
	 *            anObject - The object to pass to the next generator.
	 * @throws GenerationException
	 */
	protected void createMemberGenerator(String generatorName, Object anObject) throws GenerationException {
		IBaseGenerator memberGenerator = this.getGenerator(generatorName);
		memberGenerator.initialize(anObject);
	}// createMemberGenerator

	/**
	 * Checks if the method that is going to be generated is one that the homeinterface generates,
	 * if it is, it is not generated.
	 * 
	 * @param Method
	 *            method - Method to check.
	 * @return boolean
	 * @throws GenerationException
	 */
	public boolean isBaseHomeMethod(Method method) throws GenerationException {

		if (method.getName().equals("findByPrimaryKey")) { //$NON-NLS-1$
			return true;
		} else if (method.getName().equals("create")) { //$NON-NLS-1$
			if (method.listParametersWithoutReturn().length == 0) {
				return true;
			}
			if (((EnterpriseBeanHelper) getTopLevelHelper()).getEjb().isSession())
				return false;

			entityTopHelper = (EntityHelper) getTopLevelHelper();
			//The current methods list of parameters
			JavaParameter[] currentCreateParamsArray = method.listParametersWithoutReturn();

			//The list of parameters on the create that is originality generated by home
			//interface codegen
			JavaParameterDescriptor[] realCreateParamsArray = EJBGenHelpers.getEntityRequiredFieldsAsBeanParms(entityTopHelper.getEntity(), entityTopHelper, this.getSourceContext().getNavigator());
			//Check if the current method to be generated is the primarly create method generated
			// by
			//home generators.
			if (currentCreateParamsArray.length != realCreateParamsArray.length) {
				return false;
			}
			for (int i = 0; i < realCreateParamsArray.length; i++) {
				String realParam = realCreateParamsArray[i].getType();
				String currentParam = ((JavaHelpers) currentCreateParamsArray[i].getEType()).getQualifiedName();
				if (!currentParam.equals(realParam)) {
					return false;
				}// if
			}// for
			return true;
			// alt. way to get the params.
			//				if( currentCreateParamsList.size() != realCreateParamsArray.length ) {
			//					return false;
			//				} else {
			//					int size = currentCreateParamsList.size();
			//					JavaParameter param = null;
			//					for( int i = 0; i < size; i++ ) {
			//						param = (JavaParameter) currentCreateParamsList.get(i);
			//						if
			// (!param.getJavaType().getQualifiedName().equals(realCreateParamsArray[i].getType()))
			//							return false;
			//					}// for
			//					return true;
			//				}// if

		}// if

		return false;
	}// isBaseHomeMethod

	/**
	 * Converts the array of JavaParameterDescriptors to a list of them to be used in compare
	 * operations.
	 * 
	 * @param JavaParameterDescriptor[]
	 *            javaParams - Array of parameters.
	 * @return List
	 */
	public List convertParamsArrayToList(JavaParameterDescriptor[] paramArray) {
		ArrayList paramList = new ArrayList();

		for (int i = 0; i < paramArray.length; i++) {
			if (paramArray[i] != null) {
				paramList.add(paramArray[i]);
			}// if
		}// for
		return paramList;
	}// convertParamsArrayToList

	/**
	 * Gets the name
	 * 
	 * @throws GenerationException
	 */
	protected String getName() throws GenerationException {
		return null;
	}// getName()

}// EJBMethodGroupGenerator
